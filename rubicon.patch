Index: builtin/TestString.rb
===================================================================
RCS file: /var/cvs/rubytests/rubicon/builtin/TestString.rb,v
retrieving revision 1.7
diff -u -d -u -r1.7 TestString.rb
--- builtin/TestString.rb	18 Jul 2005 16:21:08 -0000	1.7
+++ builtin/TestString.rb	20 Jul 2005 06:48:42 -0000
@@ -9,6 +9,8 @@
   end
 end
 
+class TestStringSubclass < String; end # for test_to_s/test_to_str
+
 class TestString < Test::Unit::TestCase
 
   def initialize(*args)
@@ -23,7 +25,7 @@
     begin
       S("Foo")[/Bar/] = S("")
       @aref_re_silent = true
-    rescue
+    rescue IndexError
       @aref_re_silent = false
     end
     begin
@@ -198,7 +200,7 @@
     assert(S("CaT") != S('cAt'))
   end
 
-  def test_LSHIFT # '<<'
+  def test_double_left_arrow # '<<'
     assert_equal(S("world!"), S("world") << 33)
     assert_equal(S("world!"), S("world") << S('!'))
   end
@@ -257,10 +259,16 @@
   end
 
   def test_MUL # '*'
-    assert_equal(S("XXX"),  S("X") * 3)
+    assert_equal(S(""), S("HO") * 0)
     assert_equal(S("HOHO"), S("HO") * 2)
   end
 
+  def test_MUL_negative
+    assert_raises ArgumentError do
+      S("str") * -1
+    end
+  end
+
   def test_PLUS # '+'
     assert_equal(S("Yodel"), S("Yo") + S("del"))
   end
@@ -306,48 +314,50 @@
   def test_capitalize
     assert_equal(S("Hello"),  S("hello").capitalize)
     assert_equal(S("Hello"),  S("hELLO").capitalize)
+    assert_equal(S("Hello"),  S("Hello").capitalize)
     assert_equal(S("123abc"), S("123ABC").capitalize)
   end
 
-  def test_capitalize!
-    a = S("hello"); a.capitalize!
+  def test_capitalize_bang
+    a = S("hello")
+    assert_equal(S("Hello"), a.capitalize!)
     assert_equal(S("Hello"), a)
 
-    a = S("hELLO"); a.capitalize!
+    a = S("Hello")
+    assert_nil a.capitalize!
     assert_equal(S("Hello"), a)
 
-    a = S("123ABC"); a.capitalize!
-    assert_equal(S("123abc"), a)
-
-    assert_equal(nil,         S("123abc").capitalize!)
-    assert_equal(S("123abc"), S("123ABC").capitalize!)
-    assert_equal(S("Abc"),    S("ABC").capitalize!)
-    assert_equal(S("Abc"),    S("abc").capitalize!)
-    assert_equal(nil,         S("Abc").capitalize!)
+    a = S("hELLO")
+    assert_equal S("Hello"), a.capitalize!
+    assert_equal S("Hello"), a
 
-    a = S("hello")
-    b = a.dup
-    assert_equal(S("Hello"), a.capitalize!)
-    assert_equal(S("hello"), b)
-   
+    a = S("123ABC")
+    assert_equal S("123abc"), a.capitalize!
+    assert_equal S("123abc"), a
   end
 
-  Version.greater_or_equal("1.6.8") do 
-    def test_casecmp
-      # 0
-      assert_equal(0, S("123abc").casecmp(S("123ABC")))
-      assert_equal(0, S("123AbC").casecmp(S("123aBc")))
-      assert_equal(0, S("123ABC").casecmp(S("123ABC")))
-      # 1
-      assert_equal(1, S("1X3ABC").casecmp(S("123ABC")))
-      assert_equal(1, S("123AXC").casecmp(S("123ABC")))
-      assert_equal(1, S("123ABX").casecmp(S("123ABC")))
-      assert_equal(1, S("123ABCX").casecmp(S("123ABC")))
-      # -1
-      assert_equal(-1, S("1#3ABC").casecmp(S("123ABC")))
-      assert_equal(-1, S("123A#C").casecmp(S("123ABC")))
-      assert_equal(-1, S("123AB#").casecmp(S("123ABC")))
-      assert_equal(-1, S("123AB").casecmp(S("123ABC")))
+#  def test_capitalize_bang_multibyte
+#    flunk "No capitalize! multibyte tests yet"
+#  end
+
+  def test_casecmp
+    # 0
+    assert_equal(0, S("123abc").casecmp(S("123ABC")))
+    assert_equal(0, S("123AbC").casecmp(S("123aBc")))
+    assert_equal(0, S("123ABC").casecmp(S("123ABC")))
+    # 1
+    assert_equal(1, S("1X3ABC").casecmp(S("123ABC")))
+    assert_equal(1, S("123AXC").casecmp(S("123ABC")))
+    assert_equal(1, S("123ABX").casecmp(S("123ABC")))
+    assert_equal(1, S("123ABCX").casecmp(S("123ABC")))
+    # -1
+    assert_equal(-1, S("1#3ABC").casecmp(S("123ABC")))
+    assert_equal(-1, S("123A#C").casecmp(S("123ABC")))
+    assert_equal(-1, S("123AB#").casecmp(S("123ABC")))
+    assert_equal(-1, S("123AB").casecmp(S("123ABC")))
+
+    assert_raises TypeError do
+      'foo'.casecmp Object.new
     end
   end
 
@@ -380,6 +390,10 @@
   end
 
   def test_chomp!
+    a = S("")
+    a.chomp!
+    assert_equal('', a)
+
     a = S("hello")
     a.chomp!(S("\n"))
 
@@ -414,18 +428,21 @@
     b = a.dup
     assert_equal(S("hello"), a.chomp!)
     assert_equal(S("hello\n"), b)
-   
   end
 
   def test_chop
+    assert_equal(S(""),        S("").chop)
+    assert_equal(S(""),        S("h").chop)
     assert_equal(S("hell"),    S("hello").chop)
     assert_equal(S("hello"),   S("hello\r\n").chop)
     assert_equal(S("hello\n"), S("hello\n\r").chop)
     assert_equal(S(""),        S("\r\n").chop)
-    assert_equal(S(""),        S("").chop)
   end
 
   def test_chop!
+    a = S("").chop!
+    assert_nil(a)
+
     a = S("hello").chop!
     assert_equal(S("hell"), a)
 
@@ -437,30 +454,6 @@
 
     a = S("\r\n").chop!
     assert_equal(S(""), a)
-
-    a = S("").chop!
-    assert_nil(a)
-
-    a = S("hello\n")
-    b = a.dup
-    assert_equal(S("hello"),   a.chop!)
-    assert_equal(S("hello\n"), b)
-  end
-
-  def test_clone
-    for taint in [ false, true ]
-      for frozen in [ false, true ]
-        a = S("Cool")
-        a.taint  if taint
-        a.freeze if frozen
-        b = a.clone
-
-        assert_equal(a, b)
-        assert(a.__id__ != b.__id__)
-        assert_equal(a.frozen?, b.frozen?)
-        assert_equal(a.tainted?, b.tainted?)
-      end
-    end
   end
 
   def test_concat
@@ -518,7 +511,6 @@
     assert_equal(S("hello"), b)
   end
 
-
   def test_downcase
     assert_equal(S("hello"), S("helLO").downcase)
     assert_equal(S("hello"), S("hello").downcase)
@@ -526,39 +518,25 @@
     assert_equal(S("abc hello 123"), S("abc HELLO 123").downcase)
   end
 
-  def test_downcase!
+  def test_downcase_bang
     a = S("helLO")
-    b = a.dup
     assert_equal(S("hello"), a.downcase!)
     assert_equal(S("hello"), a)
-    assert_equal(S("helLO"), b)
 
-    a=S("hello")
+    a = S("hello")
     assert_nil(a.downcase!)
     assert_equal(S("hello"), a)
   end
 
+#  def test_downcase_bang_multibyte
+#    flunk "No downcase! multibyte tests yet"
+#  end
+
   def test_dump
     a= S("Test") << 1 << 2 << 3 << 9 << 13 << 10
     assert_equal(S('"Test\\001\\002\\003\\t\\r\\n"'), a.dump)
   end
 
-  def test_dup
-    for taint in [ false, true ]
-      for frozen in [ false, true ]
-        a = S("hello")
-        a.taint  if taint
-        a.freeze if frozen
-        b = a.dup 
-
-        assert_equal(a, b)
-        assert(a.__id__ != b.__id__)
-        assert(!b.frozen?)
-        assert_equal(a.tainted?, b.tainted?)
-      end
-    end     
-  end
-
   def test_each
     $/ = "\n"
     res=[]
@@ -616,8 +594,8 @@
 
   def test_eql?
     a = S("hello")
-    assert(a.eql?(S("hello")))
-    assert(a.eql?(a))
+    assert a.eql?(S("hello"))
+    assert a.eql?(a)
   end
 
   def test_gsub
@@ -663,42 +641,60 @@
 
   def test_hash
     assert_equal(S("hello").hash, S("hello").hash)
-    assert(S("hello").hash != S("helLO").hash)
+    assert_not_equal(S("hello").hash, S("helLO").hash)
   end
 
   def test_hex
-    assert_equal(255,  S("0xff").hex)
-    assert_equal(-255, S("-0xff").hex)
-    assert_equal(255,  S("ff").hex)
-    assert_equal(-255, S("-ff").hex)
-    assert_equal(0,    S("-ralph").hex)
-    assert_equal(-15,  S("-fred").hex)
-    assert_equal(15,   S("fred").hex)
+    assert_equal(0,    S("0").hex, "0")
+    assert_equal(0,    S("0x0").hex, "0x0")
+    assert_equal(255,  S("0xff").hex, "0xff")
+    assert_equal(-255, S("-0xff").hex, "-0xff")
+    assert_equal(255,  S("0xFF").hex, "0xFF")
+    assert_equal(-255, S("-0xFF").hex, "-0xFF")
+    assert_equal(255,  S("0Xff").hex, "0Xff")
+    assert_equal(255,  S("ff").hex, "ff")
+    assert_equal(-255, S("-ff").hex, "-ff")
+    assert_equal(255,  S("FF").hex, "FF")
+    assert_equal(-255, S("-FF").hex, "-FF")
+    assert_equal(0,    S("-ralph").hex, '-ralph')
+    assert_equal(-15,  S("-fred").hex, '-fred')
+    assert_equal(15,   S("fred").hex, 'fred')
+    assert_equal(-15,  S("-Fred").hex, '-Fred')
+    assert_equal(15,   S("Fred").hex, 'Fred')
   end
 
   def test_include?
-    assert( S("foobar").include?(?f))
-    assert( S("foobar").include?(S("foo")))
-    assert(!S("foobar").include?(S("baz")))
-    assert(!S("foobar").include?(?z))
+    assert_equal true,  S("foobar").include?(S("foo"))
+    assert_equal false, S("foobar").include?(S("baz"))
+
+    assert_equal true,  S("foobar").include?(?f)
+    assert_equal false, S("foobar").include?(?z)
+
+    assert_raises TypeError do
+      S('').include? :junk
+    end
   end
 
   def test_index
-    assert_equal(0, S("hello").index(?h))
-    assert_equal(1, S("hello").index(S("ell")))
-    assert_equal(2, S("hello").index(/ll./))
+    assert_equal 0, S("hello").index(?h)
+    assert_equal 3, S("hello").index(?l, 3)
 
-    assert_equal(3, S("hello").index(?l, 3))
-    assert_equal(3, S("hello").index(S("l"), 3))
-    assert_equal(3, S("hello").index(/l./, 3))
+    assert_nil      S("hello").index(?z)
+    assert_nil      S("hello").index(?z, 3)
 
-    assert_nil(S("hello").index(?z, 3))
-    assert_nil(S("hello").index(S("z"), 3))
-    assert_nil(S("hello").index(/z./, 3))
+    assert_equal 1, S("hello").index(S("ell"))
+    assert_equal 3, S("hello").index(S("l"), 3)
 
-    assert_nil(S("hello").index(?z))
-    assert_nil(S("hello").index(S("z")))
-    assert_nil(S("hello").index(/z./))
+    assert_nil      S("hello").index(/z./)
+    assert_nil      S("hello").index(S("z"), 3)
+
+    assert_equal 2, S("hello").index(/ll./)
+    assert_equal 3, S("hello").index(/l./, 3)
+
+    assert_nil      S("hello").index(S("z"))
+    assert_nil      S("hello").index(/z./, 3)
+
+#    flunk "No backref tests" # HACK uncomment
   end
 
   Version.greater_or_equal("1.6.8") do 
@@ -714,6 +710,13 @@
     end
   end
 
+  def test_inspect
+    assert_equal '"string"', S("string").inspect
+    #str = S("hello")
+    #str[3] = 8
+    assert_equal '"hel\010o"', S("hel\010o").inspect
+  end
+
   def test_intern
     assert_equal(:koala, S("koala").intern)
     assert(:koala !=     S("Koala").intern)
@@ -743,21 +746,20 @@
     assert_raise(ArgumentError)  { S("hello").ljust(11, "") }
   end
 
-  Version.greater_or_equal("1.6.8") do 
-    def test_lstrip
-      a = S("  hello")
-      assert_equal(S("hello"), a.lstrip)
-      assert_equal(S("  hello"), a)
-      assert_equal(S("hello "), S(" hello ").lstrip)
-      assert_equal(S("hello"), S("hello").lstrip)
-    end
-    def test_lstrip!
-      a = S("  abc")
-      b = a.dup
-      assert_equal(S("abc"), a.lstrip!)
-      assert_equal(S("abc"), a)
-      assert_equal(S("  abc"), b)
-    end
+  def test_lstrip
+    a = S("  hello")
+    assert_equal(S("hello"), a.lstrip)
+    assert_equal(S("  hello"), a)
+    assert_equal(S("hello "), S(" hello ").lstrip)
+    assert_equal(S("hello"), S("hello").lstrip)
+  end
+
+  def test_lstrip!
+    a = S("  abc")
+    b = a.dup
+    assert_equal(S("abc"), a.lstrip!)
+    assert_equal(S("abc"), a)
+    assert_equal(S("  abc"), b)
   end
 
   Version.greater_or_equal("1.6.8") do 
@@ -824,12 +826,15 @@
   end
 
   def test_oct
-    assert_equal(255,  S("0377").oct)
-    assert_equal(255,  S("377").oct)
-    assert_equal(-255, S("-0377").oct)
-    assert_equal(-255, S("-377").oct)
-    assert_equal(0,    S("OO").oct)
-    assert_equal(24,   S("030OO").oct)
+    assert_equal(0,    S("0").oct, "0")
+    assert_equal(255,  S("0377").oct, "0377")
+    assert_equal(-255, S("-0377").oct, "-0377")
+    assert_equal(255,  S("377").oct, "377")
+    assert_equal(-255, S("-377").oct, "-377")
+    assert_equal(24,   S("030X").oct, "030X")
+    assert_equal(-24,  S("-030X").oct, "-030X")
+    assert_equal(0,    S("ralph").oct, "ralph")
+    assert_equal(0,    S("-ralph").oct, "-ralph")
   end
 
   def test_replace
@@ -847,26 +852,15 @@
   end
 
   def test_reverse
-    assert_equal(S("beta"), S("ateb").reverse)
-    assert_equal(S("madamImadam"), S("madamImadam").reverse)
-
-    a=S("beta")
+    a = S("beta")
     assert_equal(S("ateb"), a.reverse)
     assert_equal(S("beta"), a)
   end
 
   def test_reverse!
     a = S("beta")
-    b = a.dup
     assert_equal(S("ateb"), a.reverse!)
     assert_equal(S("ateb"), a)
-    assert_equal(S("beta"), b)
-
-    assert_equal(S("madamImadam"), S("madamImadam").reverse!)
-
-    a = S("madamImadam")
-    assert_equal(S("madamImadam"), a.reverse!)  # ??
-    assert_equal(S("madamImadam"), a)
   end
 
   def test_rindex
@@ -1161,8 +1155,7 @@
   def test_sub
     assert_equal(S("h*llo"),    S("hello").sub(/[aeiou]/, S('*')))
     assert_equal(S("h<e>llo"),  S("hello").sub(/([aeiou])/, S('<\1>')))
-    assert_equal(S("104 ello"), S("hello").sub(/./) {
-                   |s| s[0].to_s + S(' ')})
+    assert_equal(S("104 ello"), S("hello").sub(/./) { |s| s[0].to_s + S(' ')})
     assert_equal(S("HELL-o"),   S("hello").sub(/(hell)(.)/) {
                    |s| $1.upcase + S('-') + $2
                    })
@@ -1315,7 +1308,7 @@
     assert_equal(S("hi&LOW"), S("HI&low").swapcase)
   end
 
-  def test_swapcase!
+  def test_swapcase_bang
     a = S("hi&LOW")
     b = a.dup
     assert_equal(S("HI&low"), a.swapcase!)
@@ -1327,6 +1320,10 @@
     assert_equal(S("$^#^%$#!!"), a)
   end
 
+#  def test_swapcase_bang_multibyte
+#    flunk "No multibyte tests yet"
+#  end
+
   def test_to_f
     assert_equal(344.3,     S("344.3").to_f)
     assert_equal(5.9742e24, S("5.9742e24").to_f)
@@ -1342,13 +1339,21 @@
   def test_to_s
     a = S("me")
     assert_equal("me", a.to_s)
-    assert_equal(a.__id__, a.to_s.__id__) if @cls == String
+    assert_equal(a.object_id, a.to_s.object_id)
+
+    b = TestStringSubclass.new("me")
+    assert_equal("me", b.to_s)
+    assert_not_equal(b.object_id, b.to_s.object_id)
   end
 
   def test_to_str
     a = S("me")
-    assert_equal("me", a.to_s)
-    assert_equal(a.__id__, a.to_s.__id__) if @cls == String
+    assert_equal("me", a.to_str)
+    assert_equal(a.object_id, a.to_str.object_id)
+
+    b = TestStringSubclass.new("me")
+    assert_equal("me", b.to_str)
+    assert_not_equal(b.object_id, b.to_str.object_id)
   end
 
   Version.greater_or_equal("1.6.8") do 
@@ -1410,7 +1415,7 @@
     assert_equal(S("ABC HELLO 123"), S("abc HELLO 123").upcase)
   end
 
-  def test_upcase!
+  def test_upcase_bang
     a = S("hello")
     b = a.dup
     assert_equal(S("HELLO"), a.upcase!)
@@ -1422,6 +1427,10 @@
     assert_equal(S("HELLO"), a)
   end
 
+#  def test_upcase_bang_multibyte
+#    flunk "No multibyte tests yet"
+#  end
+
   def test_upto
     a     = S("aa")
     start = S("aa")
@@ -1439,4 +1448,4 @@
   end
 end
 
-# Rubicon::handleTests(TestString) if $0 == __FILE__
+Rubicon::handleTests(TestString) if $0 == __FILE__
